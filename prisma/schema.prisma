generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  role      String?   @db.VarChar(20)
  invoices  Invoice[]
}

model Company {
  id        String    @id @default(uuid())
  name      String
  email     String
  address   String
  file      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Client {
  id        String    @id @default(uuid())
  legalName String
  email     String
  address   String
  netTerms  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Product {
  id           String        @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
}

model PaymentMethod {
  id         String    @id @default(uuid())
  methodName String
  info       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  invoices   Invoice[]
}

model Invoice {
  id              String         @id @default(uuid())
  invoiceNumber   String         @unique
  date            DateTime       @default(now())
  dueDate         DateTime
  status          InvoiceStatus  @default(UNPAID)
  subtotal        Float?
  companyId       String
  clientId        String
  paymentMethodId String?
  userId          String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isdeleted       Boolean        @default(false)
  toClient        Client         @relation(fields: [clientId], references: [id])
  fromCompany     Company        @relation(fields: [companyId], references: [id])
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  items           InvoiceItem[]
  emailLogs       EmailLog[]
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  productId   String
  customPrice Float?
  quantity    Int
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model EmailAutomation {
  id         String            @id @default(uuid())
  type       EmailAutomationType
  enabled    Boolean           @default(false)
  daysBefore Int?
  daysAfter  Int?
  subject    String
  body       String            @db.Text
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model EmailLog {
  id         String             @id @default(uuid())
  invoiceId  String
  type       EmailAutomationType
  sentAt     DateTime           @default(now())
  recipient  String
  subject    String
  body       String             @db.Text
  invoice    Invoice            @relation(fields: [invoiceId], references: [id])
}

enum InvoiceStatus {
  PAID
  UNPAID
  DUE
  BAD_DEBT
}

enum EmailAutomationType {
  BEFORE_DUE
  ON_DUE
  AFTER_DUE
}

enum ERole {
  SU 
}

